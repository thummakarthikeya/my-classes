

Types Of Array
===============

1) 1D array
2) 2D array /multidiamentional array/ jagged array

Working with 1D array:
------------------------
-> it is list of same/diff types of elements which is holding contiguous memory location.


Ways to create array objects:
-----------------------------

1) Using new keyword
         example : int arr[]=new int[5];

2) Using literal array
         example : int arr[]=new int[]{1,2,3,4}; //combo of 1 & 3

3) Using Anonymous array
          example : int arr[]={1,2,3,4};


NOTE : 
-> as we know that, if we create array object then internally jvm will creates internal class for array object and also giving some name to that class by its type (type signature). 

-> follow the given JNI diagram to see type signature of classes.

------------------------------------------

Que 1:
=======
Write a java program to proof that JVM is creating internal classes for diffent types array objects.

package com.nit.batch51;

public class Test {

	public static void main(String[] args) {

		Test test = new Test();
		System.out.println(test.getClass().getName()); // com.nit.batch51.Test

		int arr1[] = new int[5];
		System.out.println(arr1.getClass().getName()); // [I

		Integer arr2[] = new Integer[5];
		System.out.println(arr2.getClass().getName()); // [Ljava.lang.Integer;

		float arr3[] = new float[5];
		System.out.println(arr3.getClass().getName()); // [F

		Float arr4[] = new Float[5];
		System.out.println(arr4.getClass().getName()); // [Ljava.lang.Float;


	}

}


------------------------------------------


Que 2 : [Find Prime]
=====================

Write a java program to find all prime numbers from array.

package com.nit.batch51;

public class Demo3 {

	public static void main(String[] args) {

		int arr[] = { 11, 2, 3, 4, 5, 6, 7 };

		for (int i = 0; i < arr.length; i++) {
			int c = 0;
			for (int j = 1; j <= arr[i]; j++) {
				if (arr[i] % j == 0)
					c++;
			}
			if (c == 2)
				System.out.println(arr[i]);
		}

	}

}

------------------------------------------

Que 3 : [Merge Two Array]
==========================

Write a java program to merge two array and return new array.

package com.nit.batch51;

import java.util.Arrays;

public class Demo3 {
	
	
	public static int[] mergeArray(int arr[],int brr[])
	{
		int crr[]=new int[arr.length+brr.length];
		int x=0;
		
		for(int i=0;i<arr.length;i++)
		{
			crr[x++]=arr[i]; //[1,2,3,4,5,0,0,0]
		}
		
		for(int i=0;i<brr.length;i++)  
		{
			crr[x++]=brr[i]; //[1,2,3,4,5,11,22,33]
		}
		
		return crr;
	}

	public static void main(String[] args) {

		int arr[] = { 1, 2, 3, 4, 5 };
		int brr[] = { 11, 22, 33 };
                int merge[] = mergeArray(arr, brr)
		System.out.println(Arrays.toString(merge));

	}

}

------------------------------------------

Que 4 : [Store First N Prime Number's Into Array]
===============================================

Write a java program to store first N prime numbers into array and return it.

package com.nit.batch51;

import java.util.Arrays;

public class Demo3 {

	public static int[] getPrime(int n) {
		int arr[] = new int[n];
		int x = 0;
		for (int i = 1; x < n; i++) {
			int c = 0;
			for (int j = 1; j <= i; j++) {
				if (i % j == 0)
					c++;
			}
			if (c == 2) {
				arr[x] = i; // [2,3,5,7,11]
				x++;
			}
		}

		return arr;
	}

	public static void main(String[] args) {

		int n = 5;
		int[] prime = getPrime(n); // [2,3,5,7,11]
		System.out.println(Arrays.toString(prime));

	}

}

------------------------------------------

Que 5 : [Count Digit's]
===========================

Write a java program to count digits of each array elements.

package com.nit.batch51;

import java.util.Arrays;

public class Demo3 {

	public static void main(String[] args) {
		
//               [LOGIC - I]

		long arr[]= {545,455455,855,4};
		
		for(int i=0;i<arr.length;i++)
		{
			long n=arr[i];
			int l=(int)(Math.log10(n)+1);
			System.out.println(arr[i]+"="+l);
		}
		
//               [LOGIC - II]

//		for(int i=0;i<arr.length;i++)
//		{
//			long n=arr[i]; //545
//			int c=0;
//			while(n!=0)
//			{
//				c++;
//				n=n/10;
//			}
//			System.out.println(arr[i]+"="+c);
//		}
		
	}

}

