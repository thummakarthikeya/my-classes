Print Even and Odd Elements Separately
Write a program to print all even elements and all odd elements separately from a given array.

Input Format

First line: an integer n (size of the array).

Second line: n space-separated integers (array elements).

Output Format

Print even elements in one line as:
Even elements are : e1 e2 e3 ...

Print odd elements in another line as:
Odd elements are : o1 o2 o3 ...
Sample Input
7
1 2 3 4 5 6 7
Sample Output
Even elements are : 2 4 6
Odd elements are : 1 3 5 7



  // Online C compiler to run C program online
#include <stdio.h>

int main() {
    // Write C code here
    int size;
    scanf("%d",&size);
    
    int arr[size];

    if(size == 0){
        printf("Invalid array size");
        return 0;
    }
    
    for(int i=0; i<size; i++){
        scanf("%d",&arr[i]);
    }
    int even, odd;
    printf("Even elements are : ");
    for(int i=0; i<size; i++){
        if(arr[i]%2 == 0){
            printf("%d ", arr[i]);
        }
    }

    printf("\nOdd elements are : ");
    for(int i=0; i<size; i++){
        if(arr[i]%2 != 0){
            printf("%d ", arr[i]);
        }
    }

    return 0;
}




///////////////////////////////////////////////////


StoreAndPrintElements
Write a program in C to store elements in an array and print it.
Input 10 elements in the array :
element - 0 : 1
element - 1 : 1


Input Format  : 1st take the size of an Array and after that take all the elements based on the array size

Output Format : print all the stored Elements of an Array
Sample Input
10 1 2 3 4 5 6 7 8 9 10
Sample Output
10 1 2 3 4 5 6 7 8 9 10


  #include <stdio.h>

int main() {
    int size;
    scanf("%d", &size);

    if (size <= 0) {
        printf("Invalid Input");
        return 0;
    }

    int arr[size];

    // Input array elements
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    // Print array elements
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}


////////////////////////////////////////////////////////////


Find Middle Element(s) of an Array
Write a program to find the middle element(s) of a given array.

If the array size is odd, print only the middle element.

If the array size is even, print both middle elements.

Note: Middle elements should be found using index calculation.

Input Format

First line: an integer n (size of the array).

Second line: n space-separated integers (array elements).

Output Format

If odd → print single middle element.

If even → print both middle elements.
Sample Input
5
1 2 3 4 5
Sample Output
3


  #include <stdio.h>

int main() {
    int size;
    scanf("%d", &size);

    if (size <= 0) {
        printf("Invalid array size");
        return 0;
    }

    int arr[size];

    // Input array elements
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    // Print array elements
    for (int i = 0; i < size; i++) {
        
        if(size%2 != 0){

            if(i==size/2){
            printf("%d ", arr[i]);
        }

        }else{

            if(i==size/2){
            printf("%d %d", arr[i-1], arr[i]);
         }
        }
        
        
        
    }

    return 0;
}



  /////////////////////////////////////////////////////////////////////



Swap First and Last Element of an Array
Write a program to swap the first and last element of a given array.

Input Format

First line: an integer n (size of the array).

Second line: n space-separated integers (array elements).

Output Format

Print the array after swapping the first and last element.
Sample Input
6
1 2 3 4 5 6
Sample Output
6 2 3 4 5 1



  #include <stdio.h>

int main() {
    int size;
    scanf("%d", &size);

    if (size <= 0) {
        printf("Invalid array size");
        return 0;
    }

    if (size <= 1) {
        printf("Array size too small to swap");
        return 0;
    }

    int arr[size];

    // Input array elements
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    int last = 0;

        last = arr[size-1];
        arr[size-1] = arr[0];
        arr[0] = last;

    // Print array elements
    for (int i = 0; i < size; i++) {
       
       printf("%d ", arr[i]);
        
    }

    return 0;
}



///////////////////////////////////////////////////////////////

Searching Element Indices
Write a C program to find the element given by user is present in the 

array or not 

If the element is present in the array also programmer have to print 

index position of that searching element.

If the user pass the element for searching in the array is not present

then also provide a appropriate message to the user that element is not 

present inside the array.


Input 1:-

[1,2,3,4,5,6,7]


Enter the number you want to search : 5


Output :-


The element which you have sreached is present inside the 4rth index 


Input 2:-

[1,2,3,4,3,6]


Enter the number you want to search : 9


Output :


The element which you have sreached is not present inside the Array.
Sample Input
7
1
2
3
4
5
6
7
5
Sample Output
The element which you have sreached is present inside the 4 index




// Online C compiler to run C program online
#include <stdio.h>

int main() {
    // Write C code here
    int size;
    scanf("%d",&size);
    
    int arr[size];

    if(size <= 0){
        printf("Invalid Arrays Size");
        return 0;
    }
    

    for(int i=0; i<size; i++){
        scanf("%d",&arr[i]);
    }


    int search;
    scanf("%d",&search);
   
   for(int i=0; i<size; i++){
        if(arr[i] == search){
            printf("The element which you have searched is present inside the %d index", i);
            return 0;
        }
   }

   printf("The element which you have searched is not present inside the Array.");

    return 0;
}


////////////////////////////////////////////////////////////////////////////////////////////



Sum of Elements
-> Reads an integer N from the user to define the size of a dynamically allocated array.
-> Prompts the user to input N integer values into the array.
-> Calculates and prints the sum of all elements in the array.

Sample TestCase :-
--------------------------
Input :-
--------
Enter the size of the array: 6  
Enter 6 elements into the array:  
8  2  3  4  5  6  

Output :-
---------
The sum of all elements in the array is: 28  
Sample Input
5
-2  -4  -6  -8  -10
Sample Output
The sum of all elements in the array is: -30



// Online C compiler to run C program online
#include <stdio.h>

int main() {
    // Write C code here
    int size;
    scanf("%d",&size);
    
    int arr[size];

    if(size == 0){
        printf("Invalid input. Array size must be greater than 0");
        return 0;
    }
    if(size < 0){
        printf("Invalid input. Array size must be a positive integer");
        return 0;
    }
    

    for(int i=0; i<size; i++){
        scanf("%d",&arr[i]);
    }

    int sum=arr[0];
   
   for(int i=1; i<size; i++){
        sum = sum+arr[i];
   }
   printf("The sum of all elements in the array is: %d",sum);

}


///////////////////////////////////////////////////////////////////////////////////////



PrintUniqueElement

Write a program in C to print all unique elements in an array. 

Test Data :

Print all unique elements of an array:

------------------------------------------

Input the number of elements to be stored in the array: 4

Input 4 elements in the array :

element - 0 : 3

element - 1 : 2

element - 2 : 2

element - 3 : 5

Expected Output :

The unique elements found in the array are:

3 5

Sample Input
4
3
2
2
5
Sample Output
The unique elements found in the array are:
3 5



// Online C compiler to run C program online
#include <stdio.h>

int main() {
    // Write C code here
    int size;
    scanf("%d",&size);
    
    int arr[size];

    if(size <= 0){
        printf("Invalid Array size");
        return 0;
    }
    
    for(int i=0; i<size; i++){
        scanf("%d",&arr[i]);
    }
    int inc=0;
           printf("The unique elements found in the array are:\n");
    for(int i=0; i<size; i++){
        inc = 0;
        for(int j=0; j<size; j++){
            if(arr[i] == arr[j]){
                inc++;
            }
        }

        if(inc == 1){
            printf("%d ",arr[i]);
        }
    }

  
}



///////////////////////////////////////////////////////////////////////////



PrintElementInDescendingOrder
Write a C program to Sort the array in descending order and print it.


Input as :

Enter array size : 6

Enter 6 element : 4 3 5 6 2 1


Output as :

After sorting in ascending order :

6 5 4 3 2 1
Sample Input
6
4
3
5
6
2
1
Sample Output
After sorting in ascending order :
6 5 4 3 2 1 




/////////////////////////////////////////////////////////////////////////

DeleteElementGivenElementFromArray
Write a C program to delete a given element from an array.

Sample input :
Enter the number of elements in the array: 8
Enter 8 elements : 10 20 30 30 30 40 50 30
Enter the element to be deleted: 30

Sample output :
Array after deletion: 10 20 40 50
Sample Input
8
10 20 30 30 30 40 50 30
30
Sample Output
10 20 40 50




//////////////////////////////////////////////////////////////////////////////


PrintElementInAscendingOrder

Write a C program to Sort the array in ascending order and print it.


Input as :

Enter array size : 6

Enter 6 element : 4 3 5 6 2 1


Output as :

After sorting in descending  order :

1 2 3 4 5 6

Sample Input
5
64 25 12 22 11 
Sample Output
11 12 22 25 64





///////////////////////////////////////////////////////////////////////////////

  
Find Pair

Write a C program that finds and prints all pairs of numbers from a given array whose sum equals a specified target value ?
----------------------------------------------------------------------------------------------------------------------------

-> The program should iterate through the array, compare every pair of numbers, and print each pair that meets the condition.

Test-Case-1 :-
--------------
Input :-
---------
Array: {1, 5, 7, -1, 5}  
Target Sum: 6  

Output :-
----------
Pair found: (1, 5)  
Pair found: (7, -1)  
Pair found: (1, 5)  

Test-Case-2 :-
--------------
Input :-
--------
Array: {0, -1, 2, -3, 1}  
Target Sum: -2  

Output :-
----------
Pair found: (0, -2)  
Pair found: (-1, -1)  
Pair found: (-3, 1)  

Invalid Test Cases :-
---------------------

Test-Case-3 :-
---------------
Input :-
---------
Array: {}-> empty array with no elements  
Target Sum: 10  
Output :-
---------
Invalid input. Array must contain at least two elements.  

Test-Case-4 :-
---------------
Input :-
---------
Array: {-5, -3, 0, 2, 4}  
Target Sum: 6  

Output :-
----------
No pairs found with the given target sum.  

Sample Input
5
1
5
7
-1
5
6
Sample Output
Pair found: (1, 5)
Pair found: (1, 5)
Pair found: (7, -1)




////////////////////////////////////////////////////////////////////////////////


MoveZerosBack

Write a C program that rearranges the elements of a given array by moving all the zeros to the back. The program should take an array as input and swap the positions of non-zero elements with zeros, such that all the zeros appear at the ending of the array, while maintaining the relative order of non-zero elements.


For example: 

given the input array: [1, 0, 2, 0, 4, 5, 0, 3, 0]

Expected output:

1 2 4 5 3 0 0 0 0
Sample Input
9
1
0
2
0
4
5
0
3
0
Sample Output
1 2 4 5 3 0 0 0 0 




///////////////////////////////////////////////////////////////////////////////////////////////



DeleteElementByIndexPosition
Write a program in C to delete an element at desired position from an array. 


Test Data : 

Input the size of array : 5 

Input 5 elements in the array in ascending order: 

element - 0 : 1 

element - 1 : 2 

element - 2 : 3 

element - 3 : 4 

element - 4 : 5 


Input the position which to delete: 3 

Expected Output : 

The new list is : 1 2 4 5 
Sample Input
6
10
20
30
40
50
60
1
Sample Output
20 30 40 50 60 



/////////////////////////////////////////////////////////////////////////////////


InsertElementInSortedArray
Write a program in C to insert the values in the array (sorted list).
--------
Sample input :
Input number of elements you want to insert (max 100): 5
Input 5 elements in the array in ascending order:
element - 0 : 2
element - 1 : 3
element - 2 : 4
element - 3 : 7
element - 4 : 8
Input the value to be inserted : 5

Sample output :
The existing array list is :2 3 4 7 8
After Insert the list is :2 3 4 5 7 8
Sample Input
5
2
3
4
7
8
Sample Output
2 3 4 5 7 8



/////////////////////////////////////////////////////////////////////////////////

FindMaximumElement
Write a C program to find the max element from an array.


Input as :

Enter array size : 5

Enter 5 elements : 4 5 3 6 2

Max element is : 6
Sample Input
5
4
5
3
6
2
Sample Output
Max element is : 6


