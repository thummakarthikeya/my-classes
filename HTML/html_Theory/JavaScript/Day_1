
JavaScript stands as one of the foundational pillars of the modern web. It is a powerful, high-level, and dynamic  that is instrumental in building highly interactive, responsive, and engaging websites. While HTML (HyperText Markup Language) provides the basic skeletal structure of a webpage and CSS (Cascading Style Sheets) dictates its visual presentation and styling, JavaScript is the element that breathes life into it. It controls the complex behavior of web pages, enabling functionality that ranges from simple form validation to sophisticated single-page applications like Google Maps or Gmail.

The story of JavaScript begins in 1995, during the intense period of competition between web browsers, known as the "first browser war." Netscape Communications Corporation, creator of the dominant Netscape Navigator browser, recognized the need to make the web more dynamic. They tasked a programmer named  with embedding a scripting language into their browser.
Eich created the initial prototype of the language in a remarkably short time—just . It was first released in Netscape Navigator 2.0. The language underwent several name changes during its early development. It was initially internally codenamed . Upon its first public beta release, it was briefly renamed to .
As Java was gaining immense popularity at the time, Netscape saw a strategic marketing opportunity. In a decision that continues to cause confusion decades later, they decided to rename LiveScript to  in December of 1995, just before its official release, to capitalize on the Java buzzword. It's crucial to understand that  with different purposes, designs, and use cases, despite the similarity in their names.
JavaScript is an , meaning it is executed line-by-line at runtime rather than being pre-compiled into machine code. This execution happens within a dedicated environment, most commonly a web browser.
Every major web browser contains a built-in , a specialized program responsible for parsing and executing JavaScript code. The performance and capabilities of these engines are a critical battleground for browser vendors. Some of the most renowned JS engines are:
 Developed by Google for the Chrome browser and is the core of Node.js.
 The original engine created by Brendan Eich, now used in Mozilla Firefox.
 Apple's engine for Safari.
 Previously used by Microsoft Edge (it has since been replaced by a version of V8).
A revolutionary shift occurred in 2009 with the creation of  by Ryan Dahl. Node.js took Google's high-performance V8 engine and moved it out of the browser, allowing JavaScript to be run on servers. This breakthrough established JavaScript as a full-stack language, enabling developers to write both the front-end (client-side) and back-end (server-side) of web applications using the same programming language.
A classic and effective analogy for understanding the roles of HTML, CSS, and JavaScript is to compare building a website to building a house:
 is the  of the house. It defines the walls, the windows, the doors, the beams, and the foundation. It determines what elements exist on the page (headings, paragraphs, images, buttons) and their basic arrangement.
 is the . It defines the color of the walls, the style of the furniture, the texture of the flooring, the font on the signs, and the layout of the garden. It controls  the HTML structure is presented to the user.
 is the . It adds interactivity and logic. It is what makes the light switches turn on the lights, the faucets control the water flow, the garage door open with a remote, and the thermostat regulate the temperature. It defines  everything works and responds to user interaction.
There are two primary methods to include JavaScript code within an HTML document:



Comments are non-executable lines of text that programmers add to their code to explain its functionality, purpose, or logic. They are ignored by the JavaScript engine and are solely for human readability and maintainability.
 Begin with two forward slashes //. Any text following // on that line is a comment.javascript// This is a single-line comment.
let price = 99.99; // This comment explains the variable declaration.
 Begin with a forward slash and an asterisk /* and end with an asterisk and a forward slash */. Everything between these markers is a comment, even if it spans multiple lines.javascript/* This is a multi-line comment.
It can span several lines.
It is often used for detailed documentation
at the top of a file or for a complex function. */
Variables are fundamental containers (literals) used to store data values—such as numbers, strings, or objects—in memory for later use and manipulation. In modern JavaScript (ES6 and later), there are three keywords to declare variables: var, let, and const.



Feature
var
let
const

Can be redeclared within the same scope (error-prone). var a=10; var a=20; is allowed.
 be redeclared within the same scope. let a=10; let a=20; throws an error.
 be redeclared within the same scope. const a=10; const a=20; throws an error.

The value it holds  be changed. var a=10; a=20; is allowed.
The value it holds  be changed. let a=10; a=20; is allowed.
The value it holds  be changed through reassignment. const a=10; a=20; throws an error.

. It is only confined to the function it is declared in.
 ({ }). It is confined to the block, statement, or expression it is declared in.
 ({ }). It is confined to the block, statement, or expression it is declared in.

Hoisted and .
Hoisted but  (Temporal Dead Zone).
Hoisted but  (Temporal Dead Zone).

The use of var is now largely considered outdated and deprecated in modern JavaScript development due to its confusing function-scoping and hoisting behavior, which can lead to bugs. It is strongly recommended to use:
const by default, for variables whose value is not intended to change.
let for variables that need to be reassigned.
Avoid using var.
